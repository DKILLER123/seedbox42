

liste & explications des routes pour les torrent :

	POST : /torrent/add-url (teste/marche):
		ajoute un torrent depuis une url
		demande un champ 'url' dans le body avec l'url du torrent

	POST : /torrent/add-torrents (teste/marche):
		ajoute un torrent depuis un fichier
		envoyer des fichiers sous le champ 'torrent' ('form-data' dans postman) MAX 10,
		reponds avec un array de dictionnaire [ {torrent: <nom du torrent>, success: true}, {}, etc.. ]

	GET : /torrent/refresh/:id :
		recupere les infos pour refresh le torrent d'id :id

	DELETE : /torrent/ ():
		supprime un ou plusieurs torrents se trouvant dans un tableau
		envoyer la/les ids du/des torrent dans un tableau dans le champ 'ids' et un champ removeLocalData avec 'true' ou 'false' suivant que l'on veuille ou non supprimer les fichiers du serveur

	POST : /torrent/move/:direction ():
		bouge un/des torrent(s) dans la queue
		envoyer la direction dans :direction (top, up, down, bottom)
		envoyer la/les id(s) dans un array dans le champ 'ids' du body
		directions :
			top = au sommet de la queue
			up = une place au dessus
			down = une place en dessous
			bottom = tout en bas de la queue

	POST : /torrent/action/:action ():
		demarre/demarre tout de suite/stop/verifie/demande de nouveau peer
		envoyer la direction dans :direction (top, up, down, bottom)
		envoyer la/les id(s) dans un array dans le champ 'ids' du body
		actions :
			start = demarre un torrent
			start-now = demarre tout de suite
			stop = stop un torrent
			verify = verifie les fichiers locaux (a verifier)
			reannounce = demande aux trackers plus de peers

	GET : /torrent/session-stats (teste/marche):
		recupere les stats de la session comme download/upload speed,
		voir la fonction sessionStats dans le fichier utils/transmissionNode.js pour plus de details
		dans le retour, si success est a true les donnees se trouve sous le champ 'data'

	GET : /torrent/session-get (teste/marche):
		recupere les infos detaille de la session,
		voir la partie 'SESSION ARGUMENTS' dans le fichier utils/transmissionNode.js pour plus de details
		dans le retour, si success est a true les donnees se trouve sous le champ 'data'

	POST : /torrent/blocklist-update (teste/pas sur que ca marche)
		update la blocklist set avec un futur session set
		si marche success a 'true' et dans data la taille de la blocklist

	GET : /torrent/port-test (teste/marche):
		check si le port des peer est ouvert
		si le check marche success a true et un champ "port-is-open" contient un booleen

	POST : /torrent/session-shutdown (teste/marche):
		ferme transmission
		ATTENTION IL FAUT ETRE CONNECTE AU SERVEUR POUR REDEMARRER LE SERVICE
		uniquement l'admin

	GET : /torrent/get-all-torrents (ok/debug):
		recupere les infos de tous les torrents en cours sous data.torrents.[]
		DEBUG A SUPPRIMER !
